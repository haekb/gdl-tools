[gd_resource type="VisualShader" load_steps=11 format=2]

[sub_resource type="VisualShaderNodeIf" id=1]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.001, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
output_port_for_preview = 0
uniform_name = "main_texture"

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv2"

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
output_port_for_preview = 0
uniform_name = "lm_texture"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=8]
output_port_for_preview = 0
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeBooleanUniform" id=10]
uniform_name = "use_alpha"

[resource]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, diffuse_burley, specular_schlick_ggx, vertex_lighting;

uniform sampler2D main_texture;
uniform sampler2D lm_texture;
uniform bool use_alpha;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(main_texture, n_out3p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Input:7
	vec3 n_out7p0 = COLOR.rgb;

// VectorOp:11
	vec3 n_out11p0 = n_out2p0 * n_out7p0;

// Input:4
	vec3 n_out4p0 = vec3(UV2, 0.0);

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(lm_texture, n_out4p0.xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// VectorOp:8
	vec3 n_in8p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out8p0 = vec3(n_out5p1) * n_in8p1;

// VectorOp:6
	vec3 n_out6p0 = n_out11p0 * n_out8p0;

// BooleanUniform:9
	bool n_out9p0 = use_alpha;

// If:10
	float n_in10p1 = 1.00000;
	float n_in10p2 = 0.00100;
	vec3 n_in10p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in10p5 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out10p0;
	if(abs((n_out9p0 ? 1.0 : 0.0) - n_in10p1) < n_in10p2)
	{
		n_out10p0 = vec3(n_out2p1);
	}
	else if((n_out9p0 ? 1.0 : 0.0) < n_in10p1)
	{
		n_out10p0 = n_in10p5;
	}
	else
	{
		n_out10p0 = n_in10p4;
	}

// Output:0
	ALBEDO = n_out6p0;
	ALPHA = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -767, -9 )
modes/cull = 2
modes/depth_draw = 3
modes/diffuse = 3
flags/vertex_lighting = true
nodes/fragment/0/position = Vector2( 400, 0 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -600, 120 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -820, 220 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -820, 540 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -600, 420 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 0, 180 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( -580, 740 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -340, 300 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -600, -60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -400, -60 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -340, 180 )
nodes/fragment/connections = PoolIntArray( 2, 1, 10, 3, 3, 0, 2, 0, 2, 0, 11, 0, 7, 0, 11, 1, 11, 0, 6, 0, 8, 0, 6, 1, 4, 0, 5, 0, 5, 1, 8, 0, 6, 0, 0, 0, 10, 0, 0, 1, 9, 0, 10, 0 )
